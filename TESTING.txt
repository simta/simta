
Simple mail delivery

mail from:<mcneal@umich.edu>
rcpt to:<mcneal@umich.edu>
data
Subject:  simple test
From: mcneal@umich.edu
This is a simple mail test.
.
quit

	-> Should be sent to end user

-------------------------------------
Vacation

mail from:<editor@umich.edu>
rcpt to:<mcneal@umich.edu>
data
Subject:  vacation test
From: editor@umich.edu
This is a vacation test and should be sent to the vacation host and end user.
.
quit

	-> Should be sent to vacation host        

-------------------------------------
group-*

mail from:<mcneal@umich.edu>
rcpt to:<simta-test1-errors@umich.edu>
rcpt to:<simta-test1-requests@umich.edu>
rcpt to:<simta-test1-owners@umich.edu>
data
Subject:  group-* test
From: mcneal@umich.edu
This is a group-* test and should be sent to sitma-test1 not simta-test1-*.  Wes should not get this
.
quit

	-> Should all goto simta-test1 not simta-test1-*
	-> Envelope from address should be changed to simta-test1

-------------------------------------
Default to group-owners

mail from:<mcneal@umich.edu>
rcpt to:<simta-test3-errors@umich.edu>
data
Subject:  no -errors test
From: mcneal@umich.edu
Should goto owner
.
quit

mail from:<mcneal@umich.edu>
rcpt to:<simta-test3-requests@umich.edu>
data
Subject:  no -requests test
From: mcneal@umich.edu
Should goto owner
.
quit
	-> Should all goto simta-test3-owner
	-> Envelope from address should be changed to simta-test3

-------------------------------------
(?)Multiple bases

-------------------------------------
Multiple dn

mail from:<mcneal@umich.edu>
rcpt to:<patrick.mcneal@umich.edu>
data
Subject:  multiple dn
From: mcneal@umich.edu
Should goto mcneal@umich.edu
.
quit
	
	-> Should goto mcneal@umich.edu

-------------------------------------
Ambiguous addresses

mail from:<mcneal@umich.edu>
rcpt to:<john.smith@umich.edu>
data
Subject:  ambigous address
From: mcneal@umich.edu
Should create a bounce with list of people
.
quit

	-> Should create bounce

-------------------------------------
( ? ) exact RDN matches are not ambiguous

-------------------------------------
Group errors

mail from:<mcneal@umich.edu>
rcpt to:<simta-test4@umich.edu>
data
Subject:  group error
From: mcneal@umich.edu
Should get a message because member no longer exists
.
quit

	-> Should get a message to simta-test4-errors because member no longer exists


-------------------------------------
( ? ) User had no mail forwarding address

-------------------------------------
Suppress no email address


mail from:<mcneal@umich.edu>
rcpt to:<simta-test-suppress-no-email@umich.edu>
data
Subject:  suppress-no-email
From: mcneal@umich.edu
There should be no bounce
.
quit
	-> Owner should not get error

mail from:<mcneal@umich.edu>
rcpt to:<simta-test-no-suppress-email@umich.edu>
data
Subject:  no-suppress-email
From: mcneal@umich.edu
There should be a note to owner of group for member with no e-mail
.
quit

	-> Owner should get error

-------------------------------------
Included groups

mail from:<mcneal@umich.edu>
rcpt to:<simta-test5@umich.edu>
data
Subject:  nested groups
From: mcneal@umich.edu
mcneal should get this
.
quit

	-> should get message

-------------------------------------
( ? ) Virus 0, 1, 2, 3


***
-------------------------------------
Moderated Group: member, direct

mail from:<mcneal@umich.edu>
rcpt to:<simta.test.moderated@umich.edu>
data
Subject:  Moderated Group: member, direct
From: mcneal@umich.edu
goto moderator
.
quit

	-> goto moderator
-------------------------------------
Moderated Group: not a member, direct

mail from:<editor@umich.edu>
rcpt to:<simta.test.moderated@umich.edu>
data
Subject:  Moderated Group: not a member, direct
From: editor@umich.edu
goto moderator
.
quit

	-> goto moderator
-------------------------------------
XXXX - set member of permitted group to simta test moderated
XXXX - set member of not permitted group to simta test moderated
-------------------------------------
Moderated Group: member, permitted group

mail from:<mcneal@umich.edu>
rcpt to:<simta.test.permitted@umich.edu>
data
Subject:  Moderated Group: member, permitted group
From: mcneal@umich.edu
goto moderator
.
quit

	-> goto moderator

-------------------------------------
Moderated Group: not a member, permitted group

mail from:<editor@umich.edu>
rcpt to:<simta.test.permitted@umich.edu>
data
Subject:  Moderated Group: not a member, permitted group
From: editor@umich.edu
goto moderator
.
quit

	-> goto moderator

-------------------------------------
Moderated Group: member, not permitted group

mail from:<mcneal@umich.edu>
rcpt to:<simta.test.not.permitted@umich.edu>
data
Subject:  Moderated Group: member, not permitted group
From: mcneal@umich.edu
goto moderator
.
quit

	-> goto moderator

-------------------------------------
Moderated Group: not a member, not permitted group

mail from:<editor@umich.edu>
rcpt to:<simta.test.not.permitted@umich.edu>
data
Subject:  Moderated Group: not a member, not permitted group
From: editor@umich.edu
goto moderator
.
quit

	-> goto moderator

-------------------------------------
Moderated Group: moderator

mail from:<xpaul@umich.edu>
rcpt to:<simta.test.moderated@umich.edu>
data
Subject:  Moderated Group: moderator
From: editor@umich.edu
Moterated: go though
.
quit

	-> go through

-------------------------------------
Members Only Group: member, direct

mail from:<mcneal@umich.edu>
rcpt to:<simta.test.members.only@umich.edu>
data
Subject:  Members Only Group: member, direct
From: mcneal@umich.edu
mcneal should get this
.
quit

	-> should go through

-------------------------------------
Members Only Group: not a member, direct

mail from:<editor@umich.edu>
rcpt to:<simta.test.members.only@umich.edu>
data
Subject:  Members Only Group: not a member, direct
From: editor@umich.edu
should get a bounce
.
quit

	-> should get a bounce
-------------------------------------
XXXX - set member of permitted group to simta.test.members.only
XXXX - set member of not permitted group to simta.test.members.only
-------------------------------------
Members Only Group: member, permitted group

mail from:<mcneal@umich.edu>
rcpt to:<simta.test.permitted@umich.edu>
data
Subject:  Members Only Group: member, permitted group
From: mcneal@umich.edu
mcneal should get this
.
quit

	-> should go through

-------------------------------------
Members Only Group: not a member, permitted group

mail from:<editor@umich.edu>
rcpt to:<simta.test.permitted@umich.edu>
data
Subject:  Members Only Group: not a member, permitted group
From: editor@umich.edu
mcneal should get this
.
quit

	-> should go through

-------------------------------------
Members Only Group: member, not permitted group

mail from:<mcneal@umich.edu>
rcpt to:<simta.test.not.permitted@umich.edu>
data
Subject:  Members Only Group: member, not permitted group
From: mcneal@umich.edu
mcneal should get this
.
quit

	-> should go through

-------------------------------------
Members Only Group: not a member, not permitted group

mail from:<editor@umich.edu>
rcpt to:<simta.test.not.permitted@umich.edu>
data
Subject:  Members Only Group: not a member, not permitted group
From: editor@umich.edu
bounce should goto simta.test.not.permitted-errors
.
quit

	-> bounce should goto simta.test.not.permitted-errors

-------------------------------------
Private Members Only Group: member, direct

mail from:<mcneal@umich.edu>
rcpt to:<simta.test.private.members.only@umich.edu>
data
Subject:  Private Members Only Group: member, direct
From: mcneal@umich.edu
mcneal should get this
.
quit

	-> should go through

-------------------------------------
Private Members Only Group: not a member, direct

mail from:<editor@umich.edu>
rcpt to:<simta.test.private.members.only@umich.edu>
data
Subject:  Private Members Only Group: not a member, direct
From: editor@umich.edu
editor should get a bounce
.
quit

	-> bounce to sender

-------------------------------------
XXXX - set member of permitted group to simta test private members only
XXXX - set member of not permitted group to simta test private members only
-------------------------------------
Private Members Only Group: member, permitted group

mail from:<mcneal@umich.edu>
rcpt to:<simta.test.permitted@umich.edu>
data
Subject:  Private Members Only Group: member, permitted group
From: mcneal@umich.edu
should go through
.
quit

	-> should go through

-------------------------------------
Private Members Only Group: not a member, permitted group

mail from:<editor@umich.edu>
rcpt to:<simta.test.permitted@umich.edu>
data
Subject:  Private Members Only Group: not a member, permitted group
From: editor@umich.edu
should go through
.
quit

	-> should go through

-------------------------------------
Private Members Only Group: member, not permitted group

mail from:<mcneal@umich.edu>
rcpt to:<simta.test.not.permitted@umich.edu>
data
Subject:  Private Members Only Group: member, not permitted group
From: mcneal@umich.edu
should go through
.
quit

	-> should go through

-------------------------------------
Private Members Only Group: not a member, not a permitted group

mail from:<editor@umich.edu>
rcpt to:<simta.test.not.permitted@umich.edu>
data
Subject:  Private Members Only Group: not a member, not a permitted group
From: editor@umich.edu
should be bit bucket-ed
.
quit

	-> should be bit bucket-ed

-------------------------------------
Moderated Members Only Group: member, direct

mail from:<mcneal@umich.edu>
rcpt to:<simta.test.moderated.members.only@umich.edu>
data
Subject:  Moderated Members Only Group: member, direct
From: mcneal@umich.edu
should goto group
.
quit

	-> should goto group

-------------------------------------
Moderated Members Only Group: not a member, direct

mail from:<editor@umich.edu>
rcpt to:<simta.test.moderated.members.only@umich.edu>
data
Subject:  Moderated Members Only Group: not a member, direct
From: editor@umich.edu
should goto moderator
.
quit

	-> should goto moderator

-------------------------------------
XXXX - set member of permitted group to simta test moderated members only
XXXX - set member of not permitted group to simta test moderated members only
-------------------------------------

Moderated Members Only Group: member, permitted group

mail from:<mcneal@umich.edu>
rcpt to:<simta.test.permitted@umich.edu>
data
Subject:  Moderated Members Only Group: member, permitted group
From: mcneal@umich.edu
should goto group
.
quit

	-> should goto group

-------------------------------------

Moderated Members Only Group: not a member, permitted group

mail from:<editor@umich.edu>
rcpt to:<simta.test.permitted@umich.edu>
data
Subject:  Moderated Members Only Group: not a member, permitted group
From: editor@umich.edu
should goto group
.
quit

	-> should goto group

-------------------------------------

Moderated Members Only Group: member, not a permitted group

mail from:<mcneal@umich.edu>
rcpt to:<simta.test.not.permitted@umich.edu>
data
Subject:  Moderated Members Only Group: member, not a permitted group
From: mcneal@umich.edu
should goto to group
.
quit

	-> should goto group

-------------------------------------

Moderated Members Only Group: not a member, not a permitted group

mail from:<editor@umich.edu>
rcpt to:<simta.test.not.permitted@umich.edu>
data
Subject:  Moderated Members Only Group: not a member, not a permitted group
From: editor@umich.edu
should goto to moderator
.
quit

	-> should goto moderator

-------------------------------------
Private Moderated Members Only Group: member, direct

mail from:<mcneal@umich.edu>
rcpt to:<simta.test.private.moderated.members.only@umich.edu>
data
Subject:  Private Moderated Members Only Group: member, direct
From: mcneal@umich.edu
should goto group
.
quit

	-> should goto group

-------------------------------------
Private Moderated Members Only Group: not a member, direct

mail from:<editor@umich.edu>
rcpt to:<simta.test.private.moderated.members.only@umich.edu>
data
Subject:  Private.Moderated Members Only Group: not a member, direct
From: editor@umich.edu
should goto moderator
.
quit

	-> should goto moderator

-------------------------------------
XXXX - set member of permitted group to simta test private moderated members only
XXXX - set member of not permitted group to simta test private moderated members only
-------------------------------------

Private Moderated Members Only Group: member, permitted group

mail from:<mcneal@umich.edu>
rcpt to:<simta.test.permitted@umich.edu>
data
Subject:  Private Moderated Members Only Group: member, permitted group
From: mcneal@umich.edu
should goto group
.
quit

	-> should goto group

-------------------------------------

Private Moderated Members Only Group: not a member, permitted group

mail from:<editor@umich.edu>
rcpt to:<simta.test.permitted@umich.edu>
data
Subject:  Private Moderated Members Only Group: not a member, permitted group
From: editor@umich.edu
should goto group
.
quit

	-> should goto group

-------------------------------------

Private Moderated Members Only Group: member, not a permitted group

mail from:<mcneal@umich.edu>
rcpt to:<simta.test.not.permitted@umich.edu>
data
Subject:  Private Moderated Members Only Group: member, not a permitted group
From: mcneal@umich.edu
should goto to group
.
quit

	-> should goto group

-------------------------------------

Private Moderated Members Only Group: not a member, not a permitted group

mail from:<editor@umich.edu>
rcpt to:<simta.test.not.permitted@umich.edu>
data
Subject:  Private Moderated Members Only Group: not a member, not a permitted group
From: editor@umich.edu
should goto to moderator
.
quit

	-> should goto moderator

-------------------------------------
.forward

( ? )Group bounces envelope's from do not get rewritten

-------------------------------------
How are mail and mailForwardingAddress handled when there are multiple addresses
 imbedded?  How about users with no @?

-------------------------------------
Return path is properly set in the text of a message on local delivery.

-------------------------------------
Test secondary MX

-------------------------------------
Test cname without mx/a

-------------------------------------
Test non-strict-rfc checking



	if vacation attr is set for a user, send mail to vacation host

group-errors
group-requests
group-owners
	if group- exists, sends message to LDAP entry, otherwise use it as full address.
	If these values are not set, send to group owner

group
	When sending a message to a group, the envelope from address is changed to the group name.

Verify that multiple base work, ie CN ( patrick.mcneal@umich.edu )

Ambiguous addresses should create a bounce. ( john.smith@umich.edu )

If addressed to group-errors/group-requests but there are no associated addresses in the group entry, send to group-owner.

exact RDN matches are not ambiguous

Errors with group should be sent to group-errors.  IE - if a member is no longer in it.

Group Moderation

Group envelope's from gets rewritten

Group bounces envelope's from do not get rewritten

User had no mail forwarding address

Group with suppress no email address

groups within groups

Virus 0, 1, 2, 3

How are mail and mailForwardingAddress handled when there are multiple addresses imbedded?  How about users with no @?

Does .forward work?

Return path is properly set in the text of a message on local delivery.

Here are the contents of the files I was using to test simta with:

    static int
f_helo( SNET *snet, struct envelope *env, int ac, char *av[])
{
+ test syntax "Helo hostname"
}


    static int
f_ehlo( SNET *snet, struct envelope *env, int ac, char *av[])
{
+ test syntax "ehlo hostname"
+ test after valid "MAIL FROM" & "RCPT TO"
+ test after valid DATA
- test after valid START_TLS
}


    static int
f_mail( SNET *snet, struct envelope *env, int ac, char *av[])
{
- - Test LDAP -owners, etc

+ Test rfc_2821_trimaddr
+ Test <>
+ Test <postmaster>
+ Test <user@local_domain> with global relay
+ Test <user@not_local_domain> with global relay
+ Test after valid DATA
+ Test after valid MAIL FROM & RCPT TO
- Test <user@local_domain> & no global relay (mcneal)
- Test <user@not_local_domain> & no global relay (mcneal)
}


    static int
f_rcpt( SNET *snet, struct envelope *env, int ac, char *av[])
{
+ Test bad syntax
+ Test before valid MAIL FROM
+ Test after valid DATA
+ Test <postmaster>
+ Test <>
+ Test <user@local>, global relay
+ Test <user@not_local>, global relay
+ Test local_user@local_domain
? Test not_local_user@local_domain, with global relay
    works, but should we reject instead of geneting a bounce?
- Test not_local_user@local_domain, no global relay
- Test <user@local>, no global relay (mcneal)
- Test <user@not_local>, no global relay (mcneal)
- Test check_hostname( @valid_dns ) (mcneal)
- Test check_hostname( @not_valid_dns ) (mcneal)
}


    static int
f_data( SNET *snet, struct envelope *env, int ac, char *av[])
{
+ Test bad syntax
+ Do DATA before valid MAIL FROM
+ Do DATA after valid DATA
+ Do DATA before any valid RCPT TOs
+ Test EOF before and after header section
- Check to see that the "Received From" header is sane
- Test timeout for data 
- ADD support for fucked up headers
}

    static int
f_quit( SNET *snet, struct envelope *env, int ac, char *av[])
{
+ Test bad syntax
}


    static int
f_rset( SNET *snet, struct envelope *env, int ac, char *av[])
{
+ Test bad syntax
+ RSET a partial message
+ RSET a complete message 
}


    static int
f_noop( SNET *snet, struct envelope *env, int ac, char *av[])
{
+ Exercise
}


    static int
f_help( SNET *snet, struct envelope *env, int ac, char *av[])
{
+ Exercise
}


    static int
f_vrfy( SNET *snet, struct envelope *env, int ac, char *av[])
{
+ Exercise
}


    static int
f_expn( SNET *snet, struct envelope *env, int ac, char *av[])
{
+ Exercise
}


#ifdef HAVE_LIBSSL
    static int
f_starttls( SNET *snet, struct envelope *env, int ac, char *av[])
{
X Exercise
    failed
- Test TLS syntax
- Test TLS start more than once
- Test starting TLS (wes? mcneal?)
- Test starting TLS after MAIL FROM, RCPT TO, DATA
}
#endif /* HAVE_LIBSSL */


    void
smtp_receive( int fd, struct sockaddr_in *sin )
{
+ Exceed maximum number of inbound SMTP requests.
+ Exercise access control based on IP
+ Exercise access control based on domain name
+ Test SMTP inbounder timeout
+ Test argc 2821 parsing code
+ Test illegal commands
+ Test commands whose lines are too long
+ Test every SMTP command
+	{ "HELO",		f_helo },
+	{ "EHLO",		f_ehlo },
+	{ "RSET",		f_rset },
+	{ "NOOP",		f_noop },
+	{ "QUIT",		f_quit },
+	{ "HELP",		f_help },
+	{ "VRFY",		f_vrfy },
+	{ "EXPN",		f_expn },
+	{ "MAIL",		f_mail },
+	{ "RCPT",		f_rcpt },
+	{ "DATA",		f_data },
    #ifdef HAVE_LIBSSL
X	{ "STARTTLS",	f_starttls },
    didn't work
    #endif /* HAVE_LIBSSL */
- check reverse on incoming connection (mcneal)
}


    static int
local_address( char *addr, char *domain, struct host *host )
{
- Test for addresses in the alias db
- Test for addresses in the passwd file
#ifdef HAVE_LDAP
- Test for addresses in LDAP
#endif /* HAVE_LDAP */
}


    static int
rfc_2821_trimaddr( int mode, char *arg, char **address, char **domain )
{
+ Flowchart
}


    void
deliver_local( struct deliver *d )
{
- - Deliver locally to <local_user@local_host>
- Deliver locally to <postmaster>
- Deliver locally successfully
- Deliver locally tempfail
- Deliver locally EX_NOUSER or EX_DATAERR
}


    int
q_runner( struct host_q **host_q )
{
- Test for no messages in queue
- Test for only bad messages in queue
- Test for some bad messages in queue
- Test for a HOST_DOWN queue
- Test for a HOST_BOUNCE queue
- Test q_deliver
- Test for an unexpanded message on the disk
- Test for an unexpandable message
- Test for an unexpandable message in the fast queue
- Test for an old unexpandable message
- Test bounce()
- Test for an expandable message
}


    void
q_deliver( struct host_q **host_q, struct host_q *deliver_q )
{
- deliver a message with a bad dfile
- deliver mail to a local mailer host
- deliver mail to a remote host
- deliver mail to a remote host that is down
- deliver mail to a remote host that will bounce the queue
- bounce an old, undeliverable piece of mail
- bounce an envelope during delivery
- bounce only some of the recipients of a message
- worst case: some fails, some tempfails, some successes
}


    int
q_runner_dir( char *dir )
{
- test directory existance, permissions, etc
- test env_read_queue_info
- test q_runner
}


    void
deliver_remote( struct deliver *d, SNET **snet_smtp, struct host_q *deliver_q )
{
- smet_connect()
- smet_send()
- smet_rset()
- smet_quit()
}
