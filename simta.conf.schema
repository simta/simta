"$schema": "https://json-schema.org/schema#"

definitions {
    filesystem_path {
        type: string
        pattern: ^(/[^/]+)+$
    }

    hostname {
        type: string
        pattern: ^([-a-zA-Z0-9]+\.)*[-a-zA-Z0-9]+$
    }

    acl_action {
        type: string
        enum [ accept, block, log_only, trust ]
    }

    acl {
        type: object
        properties {
            list { type: string }
            type {
                type: string
                enum [ file, dns ]
            }
            action { "$ref": "#/definitions/acl_action" }
            message { type: string }
            algorithm { type: string }
            domain_only { type: boolean }
        }
        patternProperties {
            "^([0-9]{1,3}\.){3}[0-9]{1,3}$": { "$ref": "#/definitions/acl_action" }
        }
        required [ list, action ]
        additionalProperties: false
    }

    red_host {
        type: object
        properties {
            expand {
                type: object
                properties {
                    permit_subdomains { type: boolean }
                }
                additionalProperties: false
            }
            deliver {
                type: object
                properties {
                    connection {
                        type: object
                        properties {
                            aggressive { type: boolean }
                            ipv4 { type: boolean }
                            ipv6 { type: boolean }
                            max_messages { type: integer }
                            max_rcpts { type: integer }
                            port { type: integer }
                        }
                        required [ aggressive, ipv4, ipv6, max_messages, max_rcpts, port ]
                        additionalProperties: false
                    }
                    queue {
                        type: object
                        properties {
                            strategy {
                                type: string
                                enum [ fifo, shuffle ]
                            }
                            wait {
                                type: object
                                properties {
                                    min { type: number }
                                    max { type: number }
                                }
                                required [ min, max ]
                                additionalProperties: false
                            }
                        }
                        required [ strategy, wait ]
                        additionalProperties: false
                    }
                    punt {
                        type: object
                        properties {
                            enabled { type: boolean }
                            always { type: boolean }
                            host { "$ref": "#/definitions/hostname" }
                        }
                        required [ enabled, always ]
                        additionalProperties: false
                    }
                    local {
                        type: object
                        properties {
                            enabled { type: boolean }
                            agent { type: string }
                        }
                        required [ enabled ]
                        additionalProperties: false
                    }
                    bitbucket {
                        type: object
                        properties {
                            enabled { type: boolean }
                            delay { type: number }
                        }
                        required [ enabled, delay ]
                        additionalProperties: false
                    }
                    secondary_mx { type: boolean }
                    tls {
                        type: object
                        properties {
                            enabled { type: boolean }
                            required { type: boolean }
                            verify { type: boolean }
                            ciphers { type: string }
                        }
                        required [ enabled, required, verify, ciphers ]
                        additionalProperties: false
                    }
                }
                required [ bitbucket, connection, local, punt, queue, secondary_mx, tls ]
                additionalProperties: false
            }
            rule {
                type: array
                items: { "$ref": "#/definitions/red_rule" }
            }
        }
        required [ deliver ]
        additionalProperties: false
    }

    red_rule {
        type: object
        properties {
            receive {
                type: object
                properties {
                    enabled { type: boolean }
                    required { type: boolean }
                    sufficient { type: boolean }
                }
                required [ enabled, required, sufficient ]
                additionalProperties: false
            }
            expand {
                type: object
                properties {
                    enabled { type: boolean }
                    subaddress_separators {
                        type: string
                        pattern: "^[-a-zA-Z0-9*+!#$%&/=?^_`{|}~']*$"
                    }
                }
                required [ enabled ]
                additionalProperties: false
            }
            type {
                type: string
                enum [ accept, alias, ldap, password, srs ]
            }
            associated_domain {
                allOf [
                    { "$ref": "#/definitions/hostname" }
                    { description: sets the domain for group return paths }
                ]
            }
            accept {
                type: object
                additionalProperties: false
            }
            alias {
                type: object
                properties {
                    path { "$ref": "#/definitions/filesystem_path" }
                }
                required [ path ]
                additionalProperties: false
            }
            ldap {
                type: object
                properties {
                    attributes {
                        type: object
                        properties {
                            additional_acls_flag { type: string }
                            autoreply { type: string }
                            autoreply_end { type: string }
                            autoreply_start { type: string }
                            external_address { type: string }
                            forwarding { type: string }
                            mail { type: string }
                            moderators { type: string }
                            permitted_domains { type: string }
                            permitted_senders { type: string }
                            request { type: array, items: { type: string }}
                        }
                        required [ external_address, forwarding, mail, moderators, permitted_domains, permitted_senders ]
                    }
                    autoreply {
                        type: object
                        properties {
                            host { "$ref": "#/definitions/hostname" }
                        }
                        additionalProperties: false
                    }
                    bind {
                        type: object
                        properties {
                            dn { type: string }
                            method {
                                type: string
                                enum [ sasl, simple ]
                            }
                            password { type: string }
                        }
                        required [ method ]
                    }
                    debug { type: boolean }
                    moderation_preface: { type: string }
                    objectclasses {
                        type: object
                        properties {
                            group { type: array, items: { type: string }}
                            person { type: array, items: { type: string }}
                        }
                        required [ group, person ]
                    }
                    permit_moderators { type: boolean }
                    retries { type: integer }
                    search {
                        type: array
                        items {
                            type: object
                            properties {
                                rdnpref { type: boolean } # DEPRECATED
                                type { type: string, enum [ all, group, user ] }
                                uri { type: string }
                                subsearch { type: string }
                            }
                            required [ uri ]
                            additionalProperties: false
                        }
                    }
                    timeout { type: number }
                    tls {
                        type: object
                        properties {
                            ca { "$ref": "#/definitions/filesystem_path" }
                            enabled { type: boolean }
                            required { type: boolean }
                        }
                        required [ enabled, required ]
                        additionalProperties: false
                    }
                    uri {
                        type: string
                        pattern: "^[lL][dD][aA][pP][sS]{0,1}://([a-zA-Z0-9_]+\.)+([a-zA-Z0-9_])(:[0-9]{1,5}){0,1}/{0,1}$"
                    }
                }
                required [ attributes, bind, moderation_preface ]
                additionalProperties: false
            }
            password {
                type: object
                properties {
                    path: { "$ref": "#/definitions/filesystem_path" }
                }
                additionalProperties: false
            }
            srs {
                type: object
                properties {
                    secret { type: string }
                }
                required [ secret ]
                additionalProperties: false
            }
        }
        additionalProperties: false
    }
}

type: object

properties {
    core {
        type: object
        properties {
            base_dir {
                type: string
                pattern: ^(/[^/]+)+$
            }
            debug_level { type: integer, minimum: 0, maximum: 8 }
            pid_file {
                type: string
                pattern: ^(/[^/]+)+$
            }
            user { type: string }
            tls {
                type: object
                properties {
                    ca_directory { "$ref": "#/definitions/filesystem_path" }
                    ca_file { "$ref": "#/definitions/filesystem_path" }
                }
                additionalProperties: false
            }
            masquerade { "$ref": "#/definitions/hostname" }
            dns {
                type: object
                properties {
                    host { "$ref": "#/definitions/hostname" }
                    port { type: integer }
                    timeout { type: number }
                }
                required [ host, port ]
                additionalProperties: false
            }
            statsd {
                type: object
                properties {
                    enabled { type: boolean }
                    host { "$ref": "#/definitions/hostname" }
                    port { type: integer }
                    prefix { type: string }
                }
                required [ enabled, host, port, prefix ]
                additionalProperties: false
            }
            poison {
                type: object
                properties {
                    enabled { type: boolean }
                    slug { type: string }
                }
                required [ enabled ]
                additionalProperties: false
            }
        }
        required [ base_dir, debug_level, masquerade, pid_file, statsd ]
        additionalProperties: false
    }

    receive {
        type: object
        properties {
            mode {
                type: string
                enum [ normal, disabled, global_relay, tempfail, tarpit ]
            }

            punishment {
                type: string
                enum [ normal, disabled, global_relay, tempfail, tarpit ]
            }

            ports {
                type: array
                items: { type: integer }
            }

            ipv4 { type: boolean }
            ipv6 { type: boolean }

            connection {
                type: object
                properties {
                    limits {
                        type: object
                        properties {
                            global { type: integer }
                            throttle { type: integer }
                            per_host { type: integer }
                            per_host_throttle { type: integer }
                            throttle_interval { type: number }
                        }
                        required [ global, throttle, per_host, per_host_throttle, throttle_interval ]
                        additionalProperties: false
                    }

                    proxy {
                        type: object
                        properties {
                            enabled { type: boolean }
                            timeout { type: number }
                        }
                        additionalProperties: false
                    }

                    rdns {
                        type: object
                        properties {
                            check {
                                type: string
                                enum [ strict, relaxed, chillaxed ]
                            }
                            message { type: string }
                        }
                        additionalProperties: false
                    }

                    libwrap {
                        type: object
                        properties {
                            enabled { type: boolean }
                            message { type: string }
                        }
                        additionalProperties: false
                    }

                    acl {
                        type: array
                        items: { "$ref": "#/definitions/acl" }
                    }

                    banner {
                        type: object
                        properties {
                            delay { type: number }
                            punish_writes { type: boolean }
                        }
                        additionalProperties: false
                    }
                }
                additionalProperties: false
            }

            smtp {
                type: object
                properties {
                    mode {
                        type: string
                        enum [ msa, mta, strict ]
                    }
                    tarpit { type: number }
                }
                additionalProperties: false
            }

            tls {
                type: object
                properties {
                    enabled { type: boolean }
                    certificate {
                        type: array
                        items: { "$ref": "#/definitions/filesystem_path" }
                    }
                    key {
                        type: array
                        items: { "$ref": "#/definitions/filesystem_path" }
                    }
                    ciphers { type: string }
                    ports {
                        type: array
                        items: { type: integer }
                    }
                    client_cert { type: boolean }
                }
                required [ enabled ]
                dependencies {
                    certificate [ key ]
                    key [ certificate ]
                }
                additionalProperties: false
            }

            timeout {
                type: object
                properties {
                    command { type: number }
                    data { type: number }
                    data_line { type: number }
                    inactivity { type: number }
                    session { type: number }
                    tls { type: number }
                    write { type: number }
                }
                required [ command, data, data_line, inactivity, session, tls, write ]
                additionalProperties: false
            }

            srs {
                type: object
                properties {
                    enabled { type: boolean }
                    rewrite {
                        type: string
                        enum [ always, foreign, smart ]
                    }
                    domain { type: string }
                    secret { type: string }
                }
                additionalProperties: false
            }

            spf {
                type: object
                properties {
                    enabled { type: boolean }
                    query_limit { type: integer }
                    strict { type: boolean }
                    void_query_limit { type: integer }
                }
                required [ enabled, query_limit, strict, void_query_limit ]
                additionalProperties: false
            }

            dkim {
                type: object
                properties {
                    enabled { type: boolean }
                    sign { tupe: boolean }
                }
                additionalProperties: false
            }

            dmarc {
                type: object
                properties {
                    enabled { type: boolean }
                    strict { type: boolean }
                    public_suffix_file { type: string }
                }
                additionalProperties: false
            }

            arc {
                type: object
                properties {
                    enabled { type: boolean }
                    domain { "$ref": "#/definitions/hostname" }
                    selector {
                        type: string
                        pattern: ^[-_a-zA-Z0-9]+$
                    }
                    key { "$ref": "#/definitions/filesystem_path" }
                }
                additionalProperties: false
            }

            auth {
                type: object
                properties {
                    authn {
                        type: object
                        properties {
                            domain { type: string }
                            enabled { type: boolean }
                            honeypot { type: boolean }
                            sasl {
                                type: object
                                additionalProperties: true
                            }
                        }
                        additionalProperties: false
                    }
                    authz {
                        type: object
                        properties {
                            default {
                                type: string
                                enum [ accept, block ]
                            }
                            acl {
                                type: array
                                items { "$ref": "#/definitions/acl" }
                            }
                            message { type: string }
                        }
                        additionalProperties: false
                        required: [ default ]
                    }
                    results {
                        type: object
                        properties {
                            enabled { type: boolean }
                            domain { "$ref": "#/definitions/hostname" }
                        }
                    }
                }
                additionalProperties: false
            }

            mail_from {
                type: object
                properties {
                    max_failures { type: integer }
                    acl {
                        type: array
                        items { "$ref": "#/definitions/acl" }
                    }
                }
                additionalProperties: false
            }

            rcpt_to {
                type: object
                properties {
                    max_failures { type: integer }
                    acl {
                        type: array
                        items { "$ref": "#/definitions/acl" }
                    }
                }
                additionalProperties: false
            }

            data {
                type: object
                properties {
                    limits {
                        type: object
                        properties {
                            received_headers { type: integer }
                            message_size { type: integer }
                        }
                        additionalProperties: false
                    }
                    checksum {
                        type: object
                        properties {
                            enabled { type: boolean }
                            algorithm { type: string }
                        }
                        additionalProperties: false
                    }
                    content_filter {
                        type: object
                        properties {
                            enabled { type: boolean }
                            path { "$ref": "#/definitions/filesystem_path" }
                            when {
                                type: string
                                enum [ always, untrusted ]
                            }
                            message { type: string }
                        }
                        required [ message ]
                        additionalProperties: false
                    }
                }
                additionalProperties: false
            }

            queue {
                type: object
                properties {
                    strategy {
                        type: string
                        enum [ fast, slow, jail ]
                    }
                    aggression { type: integer }
                    timer { type: number }
                    max_runners { type: integer }
                }
                additionalProperties: false
            }
        }
        required [ mode, ipv4, ipv6, tls ]
        additionalProperties: false
    }

    expand {
        type: object
        properties {
            aggressive { type: boolean }
        }
        required [ aggressive ]
        additionalProperties: false
    }

    deliver {
        type: object
        properties {
            limits {
                type: object
                properties {
                    slow_runners { type: integer }
                    local_runners { type: integer }
                }
                required [ slow_runners, local_runners ]
                additionalProperties: false
            }
            jail {
                type: object
                properties {
                    host { "$ref": "#/definitions/hostname" }
                    parole_officer { type: string }
                }
                additionalProperties: false
            }
            dns {
                type: object
                properties {
                    permit_mx_cnames { type: boolean }
                }
                additionalProperties: false
            }
            dkim {
                type: object
                properties {
                    enabled { type: boolean }
                    domain { "$ref": "#/definitions/hostname" }
                    selector {
                        type: string
                        pattern: ^[-_a-zA-Z0-9]+$
                    }
                    key { "$ref": "#/definitions/filesystem_path" }
                }
            }
            queue {
                type: object
                properties {
                    bounce { type: number }
                    bounce_size { type: number }
                }
                additionalProperties: false
            }
            timeout {
                type: object
                properties {
                    command { type: number }
                    data_line { type: number }
                    data_session { type: number }
                    fast_data_line { type: number }
                    fast_data_session { type: number }
                    tls { type: number }
                }
                required [ command, data_line, data_session, fast_data_line, fast_data_session, tls ]
                additionalProperties: false
            }
        }
        additionalProperties: false
    }

    domain {
        type: object
        additionalProperties { "$ref": "#/definitions/red_host" }
    }

    defaults {
        type: object
        properties {
            red { "$ref": "#/definitions/red_host" }
            red_rule { "$ref": "#/definitions/red_rule" }
        }
        required [ red, red_rule ]
        additionalProperties: false
    }
}
required [ core, receive, expand, deliver, defaults ]
additionalProperties: false
